/*
 * Author: doe300
 *
 * See the file "LICENSE" for the full license governing this code.
 */
#ifndef VC4C_AVAILABLE_EXPRESSION_ANALYSIS
#define VC4C_AVAILABLE_EXPRESSION_ANALYSIS

#include "../Expression.h"
#include "../performance.h"
#include "Analysis.h"

namespace vc4c
{
    namespace analysis
    {
        /*
         * Maps the available locals and the available expression writing into the given local for a given point in
         * the program code. The additional integer value is the distance in instructions from the current position
         * where the expression was written.
         */
        using AvailableExpressions =
            FastMap<Expression, std::pair<const intermediate::IntermediateInstruction*, unsigned>>;

        /*
         * Analyses the available expressions within a single basic block.
         *
         * An available expression at a given point in the program is an expression that already has been calculated
         * (and whose result has not yet been overridden) and therefore does not need to be recalculated again.
         *
         * See also: https://en.wikipedia.org/wiki/Available_expression
         *
         */
        class AvailableExpressionAnalysis : public LocalAnalysis<AnalysisDirection::FORWARD, AvailableExpressions,
                                                FastMap<const Local*, FastSet<Expression>>>
        {
        public:
            explicit AvailableExpressionAnalysis();

            /*
             * For an instruction reading a, b and writing c:
             *
             * - the available expression for c is re-set to the current instruction
             *
             * NOTE: Usage of this function directly and dropping of old results is highly recommended over running the
             * analysis over the whole block!
             *
             * Returns the available expressions for the instruction and the expression generated by the instruction, if
             * any.
             */
            static std::pair<AvailableExpressions, Optional<Expression>> analyzeAvailableExpressions(
                const intermediate::IntermediateInstruction* instr, const AvailableExpressions& previousExpressions,
                FastMap<const Local*, FastSet<Expression>>& cache, unsigned maxExpressionDistance);

            static std::string to_string(const AvailableExpressions& expressions);

        private:
            /*
             * For an instruction reading a, b and writing c:
             *
             * - the available expression for c is re-set to the current instruction
             */
            static AvailableExpressions analyzeAvailableExpressionsWrapper(
                const intermediate::IntermediateInstruction* instr, const AvailableExpressions& previousExpressions,
                FastMap<const Local*, FastSet<Expression>>& cache);
        };
    } /* namespace analysis */
} /* namespace vc4c */

#endif /* VC4C_AVAILABLE_EXPRESSION_ANALYSIS */
